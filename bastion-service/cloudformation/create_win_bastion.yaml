AWSTemplateFormatVersion: "2010-09-09"
Description: provisions on-demand windows 2012r2 bastion host valid for set interval
Parameters:
  pVpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC in which a bastion is needed
  pSubnetId:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Choose one public SubnetId to deploy bastion instance
  pSecurityGroupId:
    Type: List<AWS::EC2::SecurityGroup::Id>
    Description: Choose a SecurityGroupId for remote bastion access
  pRequestorShortName:
    Type: String
    Description: Please supply your short username
    ConstraintDescription: "must be at least 5 characters"
    MinLength: 5
  pTargetInstanceId:
    Type: String
    Description: EC2 InstanceId of customer workload to create local account
Mappings:
  RegionMap:
    us-east-1:
      "64": "ami-bfeddca8"
    us-west-1:
      "64": "ami-8ad98dea"
    us-west-2:
      "64": "ami-bdb618dd"
Resources:
  RandomUserAndPwd:
    Type: Custom::RandomUserAndPwd
    Properties:
      ServiceToken: !Join ["", ["arn:aws:lambda:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":function:BastionRandomUserAndPwd"] ]
      Region: !Ref "AWS::Region"
      Requestor: !Ref pRequestorShortName
  CreateBastLocalAcct:
    Type: Custom::CreateBastLocalAcct
    Properties:
      ServiceToken: !Join ["", ["arn:aws:lambda:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":function:BastionCreateLocalAcct"] ]
      Region: !Ref "AWS::Region"
      random_username: !GetAtt RandomUserAndPwd.random_username
      random_pwd: !GetAtt RandomUserAndPwd.random_pwd
      request_user: !GetAtt RandomUserAndPwd.request_user
      expire_time: !GetAtt RandomUserAndPwd.expire_time
      instance_id: !Ref pTargetInstanceId
      platform: "windows"
  myBastionInstance:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", 64]
      InstanceType: t2.micro
      SecurityGroupIds: !Ref pSecurityGroupId
      SubnetId: !Select [0, !Ref pSubnetId]
      KeyName: demo_gold
      Tags:
      - Key: Name
        Value: Bastion-Service
      - Key: bastion_flag
        Value: true
      - Key: expire_date_time
        Value: !GetAtt RandomUserAndPwd.expire_time
      UserData:
        "Fn::Base64":
          !Join ["", ["<powershell> \n",
          "$User = \"",
          !GetAtt RandomUserAndPwd.random_username,
          "\" \n",
          "$Computer = $env:COMPUTERNAME \n",
          "$GroupName = 'Administrators' \n",
          "$ADSI = [ADSI](\"WinNT://$Computer\") \n",
          "$HelpDesk=$ADSI.Create(\"User\",$User) \n",
          "$HelpDesk.SetPassword(\"",
          !GetAtt RandomUserAndPwd.random_pwd,
          "\") \n",
          "$HelpDesk.SetInfo() \n",
          "$HelpDesk.Put(\"Description\",\"CSC Support Local Account\") \n",
          "$HelpDesk.SetInfo() \n",
          "$Group = $ADSI.Children.Find($GroupName, \"group\") \n",
          "$Group.Add((\"WinNT://$computer/$user\")) \n",
          "</powershell> \n"] ]
Outputs:
  RandomUsername:
    Description: "random generated UserID for bastion instance"
    Value: !GetAtt RandomUserAndPwd.random_username
  RandomPwd:
    Description: "random generated pwd from lambda"
    Value: !GetAtt RandomUserAndPwd.random_pwd
  Requestor:
    Description: "support engineer requesting bastion access"
    Value: !GetAtt RandomUserAndPwd.request_user
  ExpireTime:
    Description: "date and time the bastion stack will expire"
    Value: !GetAtt RandomUserAndPwd.expire_time
  BastionPublicIP:
    Description: "public IP of bastion"
    Value: !GetAtt myBastionInstance.PublicIp
  BastionFlag:
    Description: "flag to indicate stack is a bastion stack monitored for expiration"
    Value: "true"
  BastionPlatform:
    Description: "Indicates windows or linux bastion for clean-up monitoring"
    Value: "windows"
  TargetInstanceId:
    Description: "InstanceId for target managed instance where local acct created"
    Value: !Ref pTargetInstanceId
